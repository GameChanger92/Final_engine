#!/usr/bin/env python3
"""
run_pipeline.py

Pipeline test runner for Final Engine
Tests episodes 1-20 with guard validation sequence
"""

import argparse
import sys
from pathlib import Path
import json

# Add src directory to Python path
script_dir = Path(__file__).parent
project_root = script_dir.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

from src.exceptions import RetryException  # noqa: E402
from src.utils.path_helper import data_path  # noqa: E402

# TODO: from src.main import run_pipeline  # Not used in current implementation


def test_guards_sequence(episode_num: int, project: str = "default") -> bool:
    """
    Test all guards in the specified sequence and return success status.

    Expected sequence:
    1. LexiGuard PASS
    2. EmotionGuard PASS
    3. ScheduleGuard PASS
    4. ImmutableGuard PASS
    5. DateGuard PASS
    6. AnchorGuard PASS
    7. RuleGuard PASS
    8. RelationGuard PASS
    9. PacingGuard PASS

    Parameters
    ----------
    episode_num : int
        Episode number to test
    project : str, optional
        Project ID for path resolution, defaults to "default"

    Returns
    -------
    bool
        True if all guards pass, False otherwise
    """
    print(f"\nüß™ Testing Episode {episode_num} Guard Sequence...")

    # Sample draft content for testing with high lexical diversity and Korean pacing elements
    draft_content = f"""
    Episode {episode_num} begins with our protagonist facing unprecedented challenges.
    Ï£ºÏù∏Í≥µÏù¥ Îã¨Î†∏Îã§. "Ïñ¥ÎîîÎ°ú Í∞ÄÏïº ÌïòÏßÄ?" Í∑∏Îäî ÏÉùÍ∞ÅÌñàÎã§. The protagonist makes their first appearance.
    
    The morning sun illuminated the bustling marketplace. ÏÉÅÏù∏Ïù¥ Î¨ºÍ±¥ÏùÑ Í∫ºÎÉàÎã§.
    "Ï¢ãÏùÄ ÏïÑÏπ®ÏûÖÎãàÎã§!" Í∑∏Í∞Ä Ïô∏Ï≥§Îã§. Children laughed gleefully while playing nearby fountains.
    ÏïÑÏù¥Îì§Ïù¥ Îõ∞Ïñ¥Í∞îÎã§. "Ïû¨ÎØ∏ÏûàÎã§!" Í∑∏Îì§Ïù¥ ÎßêÌñàÎã§. ÌñâÎ≥µÌïòÎã§Í≥† ÎäêÍºàÎã§.
    
    Suddenly, mysterious shadows emerged from ancient alleyways. Í∑∏Î¶ºÏûêÍ∞Ä ÏõÄÏßÅÏòÄÎã§.
    Citizens gathered nervously. "Î¨¥Ïä® ÏùºÏù¥ÏßÄ?" Í∑∏Îì§Ïù¥ Í±±Ï†ïÌñàÎã§. ÎëêÎ†µÎã§Í≥† ÏÉùÍ∞ÅÌñàÎã§.
    
    Our brave heroes must navigate complex political intrigue. ÏòÅÏõÖÎì§Ïù¥ Ïã∏Ïõ†Îã§.
    "Ïö∞Î¶¨Í∞Ä Ìï¥Ïïº Ìï† ÏùºÏù¥ Î¨¥ÏóáÏù∏Í∞Ä?" ÎåÄÏû•Ïù¥ Î¨ºÏóàÎã§. Í∞ÅÏûê Îã§ÏßêÌñàÎã§.
    Each character demonstrates unique abilities. ÏπòÎ£åÏÇ¨Í∞Ä ÏπòÏú†ÌñàÎã§.
    
    The antagonist reveals sinister motivations. ÏïÖÏó≠Ïù¥ Í≥µÍ≤©ÌñàÎã§.
    "ÎÑàÌù¨Îäî Ïù¥Ìï¥ÌïòÏßÄ Î™ªÌïúÎã§!" Í∑∏Í∞Ä ÏÜåÎ¶¨Ï≥§Îã§. Î∂ÑÎÖ∏ÌñàÎã§Í≥† Íπ®Îã¨ÏïòÎã§.
    Family loyalties clash against moral obligations. Í∞ÄÏ°±Ïù¥ Í∞àÎì±ÌñàÎã§.
    
    Romance blooms unexpectedly between unlikely partners. Ïó∞Ïù∏Îì§Ïù¥ ÎßåÎÇ¨Îã§.
    "ÎãπÏã†ÏùÑ ÏÇ¨ÎûëÌï©ÎãàÎã§." Í∑∏ÎÖÄÍ∞Ä Í≥†Î∞±ÌñàÎã§. Í∏∞ÏÅòÎã§Í≥† ÏïåÏïòÎã§.
    Their relationship develops gradually through shared hardships.
    
    Technological innovations transform traditional combat methods. Ï†ÑÏÇ¨Îì§Ïù¥ ÌõàÎ†®ÌñàÎã§.
    "ÏÉàÎ°úÏö¥ Î¨¥Í∏∞Î•º Î∞∞ÏõåÏïº ÌïúÎã§." ÍµêÍ¥ÄÏù¥ ÏÑ§Î™ÖÌñàÎã§. Ïñ¥Î†µÎã§Í≥† ÌåêÎã®ÌñàÎã§.
    Veterans struggle adapting while younger fighters embrace new approaches.
    
    Environmental disasters threaten agricultural sustainability. ÎÜçÎØºÎì§Ïù¥ ÏùºÌñàÎã§.
    "ÎπÑÍ∞Ä Ïò§ÏßÄ ÏïäÎäîÎã§." Í∑∏Îì§Ïù¥ ÌïúÌÉÑÌñàÎã§. Ï†àÎßùÌñàÎã§Í≥† Î∞õÏïÑÎì§ÏòÄÎã§.
    Resource scarcity exacerbates existing social tensions.
    
    The episode concludes with surprising revelations. ÏßÑÏã§Ïù¥ ÎìúÎü¨ÎÇ¨Îã§.
    "Î™®Îì† Í≤ÉÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏóàÎã§!" ÌÉêÏ†ïÏù¥ Î∞úÍ≤¨ÌñàÎã§. ÎÜÄÎûêÎã§Í≥† Ïù¥Ìï¥ÌñàÎã§.
    Setting up future storylines that will explore themes of redemption and justice.
    """

    guards_passed = 0
    total_guards = 9

    # 1. LexiGuard Test
    try:
        from src.plugins.lexi_guard import lexi_guard

        lexi_guard(draft_content)
        print("‚úÖ LexiGuard PASS")
        guards_passed += 1
    except RetryException as e:
        print(f"‚ùå LexiGuard FAIL: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  LexiGuard ERROR: {e}")

    # 2. EmotionGuard Test
    try:
        from src.plugins.emotion_guard import emotion_guard

        # Test with neutral content that shouldn't trigger emotion alerts
        prev_text = "This is some neutral previous content."
        emotion_guard(prev_text, draft_content)
        print("‚úÖ EmotionGuard PASS")
        guards_passed += 1
    except RetryException as e:
        print(f"‚ùå EmotionGuard FAIL: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  EmotionGuard ERROR: {e}")

    # 3. ScheduleGuard Test
    try:
        from src.plugins.schedule_guard import schedule_guard

        # Pass episode number directly as schedule_guard expects int
        schedule_guard(episode_num)
        print("‚úÖ ScheduleGuard PASS")
        guards_passed += 1
    except RetryException as e:
        print(f"‚ùå ScheduleGuard FAIL: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  ScheduleGuard ERROR: {e}")

    # 4. ImmutableGuard Test
    try:
        from src.plugins.immutable_guard import immutable_guard

        # Load or create sample character data with proper structure
        char_path = data_path("characters.json", project)
        try:
            with open(char_path, "r", encoding="utf-8") as f:
                characters = json.load(f)
        except FileNotFoundError:
            # Create minimal character data for testing with immutable field
            characters = {
                "main_character": {
                    "name": "TestCharacter",
                    "role": "protagonist",
                    "traits": ["brave", "intelligent"],
                    "immutable": ["name", "role"],  # Required field for ImmutableGuard
                }
            }

        immutable_guard(characters, project)
        print("‚úÖ ImmutableGuard PASS")
        guards_passed += 1
    except RetryException as e:
        print(f"‚ùå ImmutableGuard FAIL: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  ImmutableGuard ERROR: {e}")

    # 5. DateGuard Test
    try:
        from src.plugins.date_guard import date_guard

        # Create date context for testing
        date_context = {
            "current_date": f"2024-{episode_num:02d}-01",
            "episode": episode_num,
        }
        date_guard(date_context, episode_num, project)
        print("‚úÖ DateGuard PASS")
        guards_passed += 1
    except RetryException as e:
        print(f"‚ùå DateGuard FAIL: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  DateGuard ERROR: {e}")

    # 6. AnchorGuard Test
    try:
        from src.plugins.anchor_guard import anchor_guard

        # Test with draft content that should contain anchor events
        anchor_guard(draft_content, episode_num, project)
        print("‚úÖ AnchorGuard PASS")
        guards_passed += 1
    except RetryException as e:
        print(f"‚ùå AnchorGuard FAIL: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  AnchorGuard ERROR: {e}")

    # 7. RuleGuard Test
    try:
        from src.plugins.rule_guard import rule_guard

        # Test with content that should pass all rules
        rule_guard(draft_content, project=project)
        print("‚úÖ RuleGuard PASS")
        guards_passed += 1
    except RetryException as e:
        print(f"‚ùå RuleGuard FAIL: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  RuleGuard ERROR: {e}")

    # 8. RelationGuard Test
    try:
        from src.plugins.relation_guard import relation_guard

        # Test relationship changes for current episode
        relation_guard(episode_num, project=project)
        print("‚úÖ RelationGuard PASS")
        guards_passed += 1
    except RetryException as e:
        print(f"‚ùå RelationGuard FAIL: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  RelationGuard ERROR: {e}")

    # 9. PacingGuard Test
    try:
        from src.plugins.pacing_guard import pacing_guard

        # Create scene texts for pacing analysis
        scene_texts = [
            draft_content[: len(draft_content) // 3],  # First third
            draft_content[
                len(draft_content) // 3 : 2 * len(draft_content) // 3
            ],  # Middle third
            draft_content[2 * len(draft_content) // 3 :],  # Last third
        ]

        pacing_guard(scene_texts, episode_num, project)
        print("‚úÖ PacingGuard PASS")
        guards_passed += 1
    except RetryException as e:
        print(f"‚ùå PacingGuard FAIL: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  PacingGuard ERROR: {e}")

    success_rate = guards_passed / total_guards
    print(
        f"\nüìä Episode {episode_num} Guard Results: {guards_passed}/{total_guards} passed ({success_rate:.1%})"
    )

    return guards_passed == total_guards


def run_episodes_test(start_ep: int, end_ep: int, project: str = "default") -> None:
    """
    Run pipeline test for episodes in the given range.

    Parameters
    ----------
    start_ep : int
        Starting episode number
    end_ep : int
        Ending episode number (inclusive)
    project : str, optional
        Project ID for path resolution, defaults to "default"
    """
    print(
        f"üöÄ Starting Pipeline Test for Episodes {start_ep}-{end_ep} (Project: {project})"
    )
    print("=" * 60)

    passed_episodes = []
    failed_episodes = []

    for episode in range(start_ep, end_ep + 1):
        success = test_guards_sequence(episode, project)

        if success:
            passed_episodes.append(episode)
            print(f"‚úÖ Episode {episode}: ALL GUARDS PASSED")
        else:
            failed_episodes.append(episode)
            print(f"‚ùå Episode {episode}: SOME GUARDS FAILED")

        # Add separator between episodes
        if episode < end_ep:
            print("-" * 40)

    # Final summary
    print("\n" + "=" * 60)
    print("üìà FINAL SUMMARY")
    print("=" * 60)
    print(f"‚úÖ Passed Episodes: {len(passed_episodes)}")
    if passed_episodes:
        print(f"   Episodes: {', '.join(map(str, passed_episodes))}")

    print(f"‚ùå Failed Episodes: {len(failed_episodes)}")
    if failed_episodes:
        print(f"   Episodes: {', '.join(map(str, failed_episodes))}")

    success_rate = len(passed_episodes) / (end_ep - start_ep + 1)
    print(f"üìä Overall Success Rate: {success_rate:.1%}")

    if success_rate >= 0.6:  # 60% or better = Day 12 completion goal
        print("\nüéâ SUCCESS: Day 12 completion criteria met!")
        print("   (60%+ episodes passing all guard checks)")
    else:
        print("\n‚ö†Ô∏è  PARTIAL: More work needed to reach Day 12 goals")


def parse_episode_range(episode_range: str) -> tuple[int, int]:
    """
    Parse episode range string like "1-20" or "5" into start, end tuple.

    Parameters
    ----------
    episode_range : str
        Range string (e.g., "1-20", "5", "10-15")

    Returns
    -------
    tuple[int, int]
        Start and end episode numbers (inclusive)
    """
    if "-" in episode_range:
        start, end = episode_range.split("-", 1)
        return int(start), int(end)
    else:
        episode = int(episode_range)
        return episode, episode


def main():
    """Main entry point for pipeline testing."""
    parser = argparse.ArgumentParser(
        description="Run pipeline tests with guard validation",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python run_pipeline.py --episodes 1-20    # Test episodes 1 through 20
  python run_pipeline.py --episodes 5       # Test only episode 5
  python run_pipeline.py --episodes 10-15   # Test episodes 10 through 15
  python run_pipeline.py --project-id demo_novel --episodes 1-3  # Test with demo project

Expected Output Format:
  ‚úÖ LexiGuard PASS
  ‚úÖ EmotionGuard PASS
  ‚úÖ ScheduleGuard PASS
  ‚úÖ ImmutableGuard PASS
  ‚úÖ DateGuard PASS
  ‚úÖ AnchorGuard PASS
  ‚úÖ RuleGuard PASS
  ‚úÖ PacingGuard PASS
        """,
    )

    parser.add_argument(
        "--episodes",
        type=str,
        default="1-20",
        help='Episode range to test (e.g., "1-20", "5", "10-15")',
    )

    parser.add_argument(
        "--project-id",
        type=str,
        default="default",
        help='Project ID for the story (defaults to "default")',
    )

    args = parser.parse_args()

    try:
        start_ep, end_ep = parse_episode_range(args.episodes)

        if start_ep < 1 or end_ep < start_ep:
            print("‚ùå Error: Invalid episode range")
            sys.exit(1)

        run_episodes_test(start_ep, end_ep, args.project_id)

    except ValueError as e:
        print(f"‚ùå Error parsing episode range '{args.episodes}': {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
